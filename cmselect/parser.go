// Code generated by goyacc -o parser.go -p main select.y. DO NOT EDIT.

//line select.y:2
package cmselect

import __yyfmt__ "fmt"

//line select.y:2

import "fmt"

const IDENTIFIER = 57346
const STRING_LITERAL = 57347
const NUMBER_LITERAL = 57348
const SELECT = 57349
const FROM = 57350
const WHERE = 57351
const AND = 57352
const OR = 57353
const NOT = 57354
const EQUAL = 57355
const NOTEQUAL = 57356
const LESSTHAN = 57357
const GREATERTHAN = 57358

var mainToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING_LITERAL",
	"NUMBER_LITERAL",
	"SELECT",
	"FROM",
	"WHERE",
	"AND",
	"OR",
	"NOT",
	"EQUAL",
	"NOTEQUAL",
	"LESSTHAN",
	"GREATERTHAN",
}

var mainStatenames = [...]string{}

const mainEofCode = 1
const mainErrCode = 2
const mainInitialStackSize = 16

//line select.y:49

type exprNode interface{}

type ProjectionNode struct {
	Field string
}

type ComparisonNode struct {
	Op    string
	Left  *ProjectionNode
	Right *ProjectionNode
}

type LogicalNode struct {
	Op      string
	Left    exprNode
	Right   exprNode
	Operand exprNode
}

type SelectNode struct {
	Projection *ProjectionNode
	TableName  string
	Where      exprNode
}

func main() {
	yyParse(newLexer("SELECT column1 FROM table1 WHERE column1 == 'some_string' AND column2 != 42"))
}

//line yacctab:1
var mainExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const mainPrivate = 57344

const mainLast = 25

var mainAct = [...]int8{
	11, 9, 5, 6, 4, 15, 16, 17, 18, 8,
	10, 12, 13, 3, 19, 20, 21, 22, 23, 24,
	14, 5, 7, 2, 1,
}

var mainPact = [...]int16{
	6, -1000, -1000, 17, -5, -1000, 18, -2, 1, -1000,
	-2, -8, 17, 17, -1000, 17, 17, 17, 17, -1000,
	-1000, -1000, -1000, -1000, -1000,
}

var mainPgo = [...]int8{
	0, 24, 9, 1, 0, 23,
}

var mainR1 = [...]int8{
	0, 1, 4, 2, 2, 2, 2, 3, 3, 3,
	3, 5,
}

var mainR2 = [...]int8{
	0, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 5,
}

var mainChk = [...]int16{
	-1000, -1, -5, 7, -4, 4, 8, 4, -2, -3,
	12, -4, 10, 11, -2, 13, 14, 15, 16, -3,
	-3, -4, -4, -4, -4,
}

var mainDef = [...]int8{
	0, -2, 1, 0, 0, 2, 0, 0, 11, 3,
	0, 0, 0, 0, 6, 0, 0, 0, 0, 4,
	5, 7, 8, 9, 10,
}

var mainTok1 = [...]int8{
	1,
}

var mainTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16,
}

var mainTok3 = [...]int8{
	0,
}

var mainErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	mainDebug        = 0
	mainErrorVerbose = false
)

type mainLexer interface {
	Lex(lval *mainSymType) int
	Error(s string)
}

type mainParser interface {
	Parse(mainLexer) int
	Lookahead() int
}

type mainParserImpl struct {
	lval  mainSymType
	stack [mainInitialStackSize]mainSymType
	char  int
}

func (p *mainParserImpl) Lookahead() int {
	return p.char
}

func mainNewParser() mainParser {
	return &mainParserImpl{}
}

const mainFlag = -1000

func mainTokname(c int) string {
	if c >= 1 && c-1 < len(mainToknames) {
		if mainToknames[c-1] != "" {
			return mainToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func mainStatname(s int) string {
	if s >= 0 && s < len(mainStatenames) {
		if mainStatenames[s] != "" {
			return mainStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func mainErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !mainErrorVerbose {
		return "syntax error"
	}

	for _, e := range mainErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + mainTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(mainPact[state])
	for tok := TOKSTART; tok-1 < len(mainToknames); tok++ {
		if n := base + tok; n >= 0 && n < mainLast && int(mainChk[int(mainAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if mainDef[state] == -2 {
		i := 0
		for mainExca[i] != -1 || int(mainExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; mainExca[i] >= 0; i += 2 {
			tok := int(mainExca[i])
			if tok < TOKSTART || mainExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if mainExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += mainTokname(tok)
	}
	return res
}

func mainlex1(lex mainLexer, lval *mainSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(mainTok1[0])
		goto out
	}
	if char < len(mainTok1) {
		token = int(mainTok1[char])
		goto out
	}
	if char >= mainPrivate {
		if char < mainPrivate+len(mainTok2) {
			token = int(mainTok2[char-mainPrivate])
			goto out
		}
	}
	for i := 0; i < len(mainTok3); i += 2 {
		token = int(mainTok3[i+0])
		if token == char {
			token = int(mainTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(mainTok2[1]) /* unknown char */
	}
	if mainDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", mainTokname(token), uint(char))
	}
	return char, token
}

func mainParse(mainlex mainLexer) int {
	return mainNewParser().Parse(mainlex)
}

func (mainrcvr *mainParserImpl) Parse(mainlex mainLexer) int {
	var mainn int
	var mainVAL mainSymType
	var mainDollar []mainSymType
	_ = mainDollar // silence set and not used
	mainS := mainrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	mainstate := 0
	mainrcvr.char = -1
	maintoken := -1 // mainrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		mainstate = -1
		mainrcvr.char = -1
		maintoken = -1
	}()
	mainp := -1
	goto mainstack

ret0:
	return 0

ret1:
	return 1

mainstack:
	/* put a state and value onto the stack */
	if mainDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", mainTokname(maintoken), mainStatname(mainstate))
	}

	mainp++
	if mainp >= len(mainS) {
		nyys := make([]mainSymType, len(mainS)*2)
		copy(nyys, mainS)
		mainS = nyys
	}
	mainS[mainp] = mainVAL
	mainS[mainp].yys = mainstate

mainnewstate:
	mainn = int(mainPact[mainstate])
	if mainn <= mainFlag {
		goto maindefault /* simple state */
	}
	if mainrcvr.char < 0 {
		mainrcvr.char, maintoken = mainlex1(mainlex, &mainrcvr.lval)
	}
	mainn += maintoken
	if mainn < 0 || mainn >= mainLast {
		goto maindefault
	}
	mainn = int(mainAct[mainn])
	if int(mainChk[mainn]) == maintoken { /* valid shift */
		mainrcvr.char = -1
		maintoken = -1
		mainVAL = mainrcvr.lval
		mainstate = mainn
		if Errflag > 0 {
			Errflag--
		}
		goto mainstack
	}

maindefault:
	/* default state action */
	mainn = int(mainDef[mainstate])
	if mainn == -2 {
		if mainrcvr.char < 0 {
			mainrcvr.char, maintoken = mainlex1(mainlex, &mainrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if mainExca[xi+0] == -1 && int(mainExca[xi+1]) == mainstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			mainn = int(mainExca[xi+0])
			if mainn < 0 || mainn == maintoken {
				break
			}
		}
		mainn = int(mainExca[xi+1])
		if mainn < 0 {
			goto ret0
		}
	}
	if mainn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			mainlex.Error(mainErrorMessage(mainstate, maintoken))
			Nerrs++
			if mainDebug >= 1 {
				__yyfmt__.Printf("%s", mainStatname(mainstate))
				__yyfmt__.Printf(" saw %s\n", mainTokname(maintoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for mainp >= 0 {
				mainn = int(mainPact[mainS[mainp].yys]) + mainErrCode
				if mainn >= 0 && mainn < mainLast {
					mainstate = int(mainAct[mainn]) /* simulate a shift of "error" */
					if int(mainChk[mainstate]) == mainErrCode {
						goto mainstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if mainDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", mainS[mainp].yys)
				}
				mainp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if mainDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", mainTokname(maintoken))
			}
			if maintoken == mainEofCode {
				goto ret1
			}
			mainrcvr.char = -1
			maintoken = -1
			goto mainnewstate /* try again in the same state */
		}
	}

	/* reduction by production mainn */
	if mainDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", mainn, mainStatname(mainstate))
	}

	mainnt := mainn
	mainpt := mainp
	_ = mainpt // guard against "declared and not used"

	mainp -= int(mainR2[mainn])
	// mainp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if mainp+1 >= len(mainS) {
		nyys := make([]mainSymType, len(mainS)*2)
		copy(nyys, mainS)
		mainS = nyys
	}
	mainVAL = mainS[mainp+1]

	/* consult goto table to find next state */
	mainn = int(mainR1[mainn])
	maing := int(mainPgo[mainn])
	mainj := maing + mainS[mainp].yys + 1

	if mainj >= mainLast {
		mainstate = int(mainAct[maing])
	} else {
		mainstate = int(mainAct[mainj])
		if int(mainChk[mainstate]) != -mainn {
			mainstate = int(mainAct[maing])
		}
	}
	// dummy call; replaced with literal code
	switch mainnt {

	case 1:
		mainDollar = mainS[mainpt-1 : mainpt+1]
//line select.y:24
		{
			mainVAL.exprNode = mainDollar[1].selectNode
		}
	case 2:
		mainDollar = mainS[mainpt-1 : mainpt+1]
//line select.y:28
		{
			mainVAL.projNode = &ProjectionNode{Field: mainDollar[1].str}
		}
	case 3:
		mainDollar = mainS[mainpt-1 : mainpt+1]
//line select.y:32
		{
			mainVAL.exprNode = mainDollar[1].cmpNode
		}
	case 4:
		mainDollar = mainS[mainpt-3 : mainpt+1]
//line select.y:33
		{
			mainVAL.exprNode = &LogicalNode{Op: "AND", Left: mainDollar[1].exprNode, Right: mainDollar[3].cmpNode}
		}
	case 5:
		mainDollar = mainS[mainpt-3 : mainpt+1]
//line select.y:34
		{
			mainVAL.exprNode = &LogicalNode{Op: "OR", Left: mainDollar[1].exprNode, Right: mainDollar[3].cmpNode}
		}
	case 6:
		mainDollar = mainS[mainpt-2 : mainpt+1]
//line select.y:35
		{
			mainVAL.exprNode = &LogicalNode{Op: "NOT", Operand: mainDollar[2].exprNode}
		}
	case 7:
		mainDollar = mainS[mainpt-3 : mainpt+1]
//line select.y:39
		{
			mainVAL.cmpNode = &ComparisonNode{Op: "==", Left: mainDollar[1].projNode, Right: mainDollar[3].projNode}
		}
	case 8:
		mainDollar = mainS[mainpt-3 : mainpt+1]
//line select.y:40
		{
			mainVAL.cmpNode = &ComparisonNode{Op: "!=", Left: mainDollar[1].projNode, Right: mainDollar[3].projNode}
		}
	case 9:
		mainDollar = mainS[mainpt-3 : mainpt+1]
//line select.y:41
		{
			mainVAL.cmpNode = &ComparisonNode{Op: "<", Left: mainDollar[1].projNode, Right: mainDollar[3].projNode}
		}
	case 10:
		mainDollar = mainS[mainpt-3 : mainpt+1]
//line select.y:42
		{
			mainVAL.cmpNode = &ComparisonNode{Op: ">", Left: mainDollar[1].projNode, Right: mainDollar[3].projNode}
		}
	case 11:
		mainDollar = mainS[mainpt-5 : mainpt+1]
//line select.y:46
		{
			mainVAL.selectNode = &SelectNode{Projection: mainDollar[2].projNode, TableName: mainDollar[4].str, Where: mainDollar[5].exprNode}
		}
	}
	goto mainstack /* stack new state and value */
}
